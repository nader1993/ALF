start
+ = (firstAction)*
+ 
+ //separation du $$ de notre expression 
+ firstAction
+    =left:secondAction " " right:pct {return left}
+ 
+ // separation de variables des expressions attribuees
+ secondAction
+    = left:string " = " right:additive { return left+' a une valeur de '+right }
+ 
+ // fonction de somme
+ additive
+   = left:subtraction "+" right:additive { return left + right; }
+   / subtraction
+ 
+ //fonction de soustraction
+ subtraction
+   = left:exponential "-" right:subtraction { return left - right; }
+   / exponential
+ 
+ // fonction de puissance
+ exponential
+   = left:division "^" right:exponential {return Math.pow(left,right)}
+   / division
+ 
+ // fonction du rapport
+ division 
+   = left:multiplicative "/" right:division {return left/right}
+   / multiplicative
+ 
+ // fonction de multiplication
+ multiplicative
+   = left:primary "*" right:multiplicative { return left * right; }
+   / primary
+ 
+ //priorite ==> parentheses
+ primary
+   = integer
+   / "(" additive:additive ")" { return additive; }
+ 
+ //valeur integree
+ integer "integer"
+   = (digits:[0-9]+) { return parseInt(digits.join(""), 10); }
+ 
+ //valeur string
+ string "string"
+   = variable:([a-zA-Z]+) { return variable.join(""); }
+ 
+ //signe de $$
+ pct
+ = final:[$][$]"\n" { return final }
